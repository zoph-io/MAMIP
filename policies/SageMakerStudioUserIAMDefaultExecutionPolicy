{
    "PolicyVersion": {
        "CreateDate": "2025-10-30T19:34:08Z", 
        "VersionId": "v4", 
        "Document": {
            "Version": "2012-10-17", 
            "Statement": [
                {
                    "Action": [
                        "datazone:AcceptPredictions", 
                        "datazone:AcceptSubscriptionRequest", 
                        "datazone:CancelMetadataGenerationRun", 
                        "datazone:CancelSubscription", 
                        "datazone:CreateAsset*", 
                        "datazone:CreateConnection", 
                        "datazone:CreateListingChangeSet", 
                        "datazone:CreateProject", 
                        "datazone:CreateSubscriptionGrant", 
                        "datazone:CreateSubscriptionRequest", 
                        "datazone:DeleteAsset*", 
                        "datazone:DeleteConnection", 
                        "datazone:DeleteListing", 
                        "datazone:DeleteProject", 
                        "datazone:DeleteSubscriptionGrant", 
                        "datazone:DeleteSubscriptionRequest", 
                        "datazone:Get*", 
                        "datazone:List*", 
                        "datazone:PostLineageEvent", 
                        "datazone:RejectPredictions", 
                        "datazone:RejectSubscriptionRequest", 
                        "datazone:RevokeSubscription", 
                        "datazone:Search", 
                        "datazone:SearchListings", 
                        "datazone:SearchRules", 
                        "datazone:SearchTypes", 
                        "datazone:SearchUserProfiles", 
                        "datazone:StartMetadataGenerationRun", 
                        "datazone:UpdateAssetFilter", 
                        "datazone:UpdateConnection", 
                        "datazone:UpdateProject", 
                        "datazone:UpdateSubscriptionRequest"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "DataZone"
                }, 
                {
                    "Action": [
                        "iam:GetRole", 
                        "iam:ListRoles", 
                        "sts:AssumeRole"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "IamSts"
                }, 
                {
                    "Action": "iam:CreateServiceLinkedRole", 
                    "Resource": [
                        "arn:aws:iam::*:role/aws-service-role/neptune-graph.amazonaws.com/AWSServiceRoleForNeptuneGraph", 
                        "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift", 
                        "arn:aws:iam::*:role/aws-service-role/sagemaker.amazonaws.com/AWSServiceRoleForAmazonSageMakerNotebooks", 
                        "arn:aws:iam::*:role/aws-service-role/ops.emr-serverless.amazonaws.com/AWSServiceRoleForAmazonEMRServerless", 
                        "arn:aws:iam::*:role/aws-service-role/airflow.amazonaws.com/AWSServiceRoleForAmazonMWAA", 
                        "arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com/AWSServiceRoleForEMRCleanup", 
                        "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint", 
                        "arn:aws:iam::*:role/aws-service-role/observability.aoss.amazonaws.com/AWSServiceRoleForAmazonOpenSearchServerless"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "CreateSLR"
                }, 
                {
                    "Action": "sts:TagSession", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "ForAllValues:StringLike": {
                            "aws:TagKeys": [
                                "AmazonDataZone*"
                            ]
                        }
                    }, 
                    "Sid": "TagSession"
                }, 
                {
                    "Action": "sts:SetSourceIdentity", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "sts:SourceIdentity": "${aws:PrincipalTag/datazone:userId}"
                        }
                    }, 
                    "Sid": "SourceIdentity"
                }, 
                {
                    "Action": [
                        "glue:StartCompletion", 
                        "q:Get*", 
                        "q:List*", 
                        "q:PassRequest", 
                        "q:SendMessage", 
                        "q:StartConversation"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Q"
                }, 
                {
                    "Action": [
                        "ssm:GetParameter*"
                    ], 
                    "Resource": [
                        "arn:aws:ssm:*:*:parameter/amazon/datazone/q*", 
                        "arn:aws:ssm:*:*:parameter/amazon/datazone/genAI/*", 
                        "arn:aws:ssm:*::parameter/aws/service/sagemaker-distribution/*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "SSM"
                }, 
                {
                    "Action": [
                        "sagemaker:CreatePresignedDomainUrl", 
                        "sagemaker:CreateUserProfile", 
                        "sagemaker:DeleteUserProfile"
                    ], 
                    "Resource": "arn:aws:sagemaker:*:*:user-profile/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneUser": "${aws:PrincipalTag/datazone:userId}"
                        }
                    }, 
                    "Sid": "SageMakerUserTagPermissions"
                }, 
                {
                    "Action": [
                        "sagemaker:CreateApp", 
                        "sagemaker:CreateSpace", 
                        "sagemaker:DeleteApp", 
                        "sagemaker:DeleteSpace", 
                        "sagemaker:UpdateSpace"
                    ], 
                    "Resource": [
                        "arn:aws:sagemaker:*:*:space/*", 
                        "arn:aws:sagemaker:*:*:app/*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneUser": "${aws:PrincipalTag/datazone:userId}", 
                            "sagemaker:SpaceSharingType": [
                                "Private"
                            ]
                        }
                    }, 
                    "Sid": "SageMakerPrivateSpace"
                }, 
                {
                    "Action": [
                        "sagemaker:StartSession"
                    ], 
                    "Resource": "arn:aws:sagemaker:*:*:space/*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneUser": "${aws:PrincipalTag/datazone:userId}"
                        }
                    }, 
                    "Sid": "AllowStartSessionForSpaceRemoteConnection"
                }, 
                {
                    "Action": [
                        "resource-groups:GetGroupQuery", 
                        "resource-groups:ListGroupResources"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "ResourceGroupsPermissions"
                }, 
                {
                    "Action": [
                        "sagemaker:Batch*", 
                        "sagemaker:Describe*", 
                        "sagemaker:List*", 
                        "sagemaker:Search", 
                        "sagemaker:*Endpoint*", 
                        "sagemaker:*Model*", 
                        "sagemaker:*Context*", 
                        "sagemaker:*Artifact*", 
                        "sagemaker:*Action*", 
                        "sagemaker:*Association*", 
                        "sagemaker:QueryLineage", 
                        "sagemaker:*InferenceComponent*", 
                        "sagemaker:*Job*", 
                        "sagemaker:StartMlflowTrackingServer", 
                        "sagemaker:StopMlflowTrackingServer", 
                        "sagemaker:CreatePresignedMlflowTrackingServerUrl", 
                        "sagemaker-mlflow:*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "SageMakerPermissions"
                }, 
                {
                    "Action": [
                        "sagemaker:AddTags", 
                        "sagemaker:DeleteTags"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "ForAllValues:StringNotLike": {
                            "aws:TagKeys": [
                                "AmazonDataZone*", 
                                "sagemaker:shared-with:*"
                            ]
                        }, 
                        "ForAllValues:StringLike": {
                            "aws:TagKeys": [
                                "ProjectUserTag*", 
                                "sagemaker*", 
                                "sm-jumpstart*", 
                                "endpoint-has-jumpstart-model"
                            ]
                        }
                    }, 
                    "Sid": "SageMakerTagPermissions"
                }, 
                {
                    "Action": [
                        "cloudwatch:PutMetricData", 
                        "logs:CreateLogGroup", 
                        "logs:CreateLogStream", 
                        "logs:Describe*", 
                        "logs:Get*", 
                        "logs:PutLogEvents", 
                        "logs:StopQuery"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "LogsAndMetrics"
                }, 
                {
                    "Action": [
                        "glue:CancelStatement", 
                        "glue:CreateSession", 
                        "glue:DeleteSession", 
                        "glue:CreateCatalog", 
                        "glue:Describe*", 
                        "glue:Get*", 
                        "glue:List*", 
                        "glue:NotifyEvent", 
                        "glue:RunStatement", 
                        "glue:StartCompletion", 
                        "glue:StopSession", 
                        "glue:UseGlueStudio", 
                        "glue:TagResource", 
                        "glue:UntagResource", 
                        "glue:*Job*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Glue"
                }, 
                {
                    "Action": [
                        "glue:*"
                    ], 
                    "Resource": [
                        "arn:aws:glue:*:*:database/*", 
                        "arn:aws:glue:*:*:table/*", 
                        "arn:aws:glue:*:*:catalog", 
                        "arn:aws:glue:*:*:catalog/*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "GlueDatabase"
                }, 
                {
                    "Action": [
                        "glue:*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "glue:LakeFormationPermissions": "Enabled"
                        }
                    }, 
                    "Sid": "GlueLakeFormation"
                }, 
                {
                    "Action": [
                        "lakeformation:BatchGrantPermissions", 
                        "lakeformation:BatchRevokePermissions", 
                        "lakeformation:DescribeResource", 
                        "lakeformation:GetDataAccess", 
                        "lakeformation:GrantPermissions", 
                        "lakeformation:ListResources", 
                        "lakeformation:ListPermissions", 
                        "lakeformation:RevokePermissions"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "LFAccess"
                }, 
                {
                    "Action": [
                        "sqlworkbench:*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "SQLWorkBench"
                }, 
                {
                    "Action": "redshift-data:*", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "redshift-data:statement-owner-iam-userid": "${aws:userid}"
                        }
                    }, 
                    "Sid": "RedshiftData"
                }, 
                {
                    "Action": [
                        "redshift-data:BatchExecuteStatement", 
                        "redshift-data:Describe*", 
                        "redshift-data:ExecuteStatement", 
                        "redshift-data:List*", 
                        "redshift-serverless:GetManagedWorkgroup", 
                        "redshift-serverless:GetNamespace", 
                        "redshift-serverless:GetWorkgroup", 
                        "redshift-serverless:List*", 
                        "redshift:Describe*", 
                        "redshift:GetClusterCredentialsWithIAM", 
                        "redshift-serverless:GetCredentials"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "RedShiftActions"
                }, 
                {
                    "Action": "bedrock:*", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Bedrock"
                }, 
                {
                    "Action": [
                        "iam:PassRole"
                    ], 
                    "Resource": "arn:aws:iam::*:role/${aws:PrincipalTag/AmazonDataZonePassedRolePath}", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "iam:PassedToService": [
                                "bedrock.amazonaws.com", 
                                "glue.amazonaws.com", 
                                "lakeformation.amazonaws.com", 
                                "sagemaker.amazonaws.com", 
                                "scheduler.amazonaws.com"
                            ], 
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "PassRole"
                }, 
                {
                    "Action": [
                        "s3:GetBucketAcl", 
                        "s3:List*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "S3List"
                }, 
                {
                    "Action": [
                        "s3:GetObject*"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringNotEquals": {
                            "aws:ResourceAccount": "${aws:PrincipalAccount}"
                        }
                    }, 
                    "Sid": "S3CrossAccount"
                }, 
                {
                    "Action": [
                        "scheduler:CreateSchedule", 
                        "scheduler:DeleteSchedule", 
                        "scheduler:Get*", 
                        "scheduler:List*", 
                        "scheduler:UpdateSchedule"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Scheduler"
                }, 
                {
                    "Action": [
                        "dynamodb:List*", 
                        "dynamodb:Describe*", 
                        "dynamodb:Scan", 
                        "dynamodb:PartiQLSelect", 
                        "dynamodb:Query", 
                        "secretsmanager:ListSecrets"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "FederatedConn"
                }, 
                {
                    "Action": [
                        "athena:BatchGet*", 
                        "athena:CreateNamedQuery", 
                        "athena:CreateNotebook", 
                        "athena:CreatePreparedStatement", 
                        "athena:CreatePresignedNotebookUrl", 
                        "athena:DeleteNamedQuery", 
                        "athena:DeleteNotebook", 
                        "athena:DeletePreparedStatement", 
                        "athena:ExportNotebook", 
                        "athena:Get*", 
                        "athena:ImportNotebook", 
                        "athena:List*", 
                        "athena:StartCalculationExecution", 
                        "athena:StartQueryExecution", 
                        "athena:StartSession", 
                        "athena:StopCalculationExecution", 
                        "athena:StopQueryExecution", 
                        "athena:TerminateSession", 
                        "athena:UpdateNamedQuery", 
                        "athena:UpdateNotebook", 
                        "athena:UpdateNotebookMetadata", 
                        "athena:UpdatePreparedStatement"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Athena"
                }, 
                {
                    "Action": [
                        "secretsmanager:CreateSecret", 
                        "secretsmanager:DeleteSecret", 
                        "secretsmanager:DescribeSecret", 
                        "secretsmanager:GetSecretValue", 
                        "secretsmanager:UpdateSecret", 
                        "secretsmanager:PutResourcePolicy"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/AmazonDataZoneProject": "${datazone:projectId}"
                        }
                    }, 
                    "Sid": "PrivateSecret"
                }, 
                {
                    "Action": [
                        "secretsmanager:CreateSecret", 
                        "secretsmanager:DescribeSecret", 
                        "secretsmanager:GetSecretValue", 
                        "secretsmanager:UpdateSecret"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringEquals": {
                            "aws:ResourceTag/for-use-with-all-datazone-projects": "true"
                        }
                    }, 
                    "Sid": "SharedSecret"
                }, 
                {
                    "Action": [
                        "codewhisperer:GenerateRecommendations"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "GenerateRecommendations"
                }, 
                {
                    "Action": [
                        "ecr:BatchCheckLayerAvailability", 
                        "ecr:BatchGetImage", 
                        "ecr:DescribeImages", 
                        "ecr:GetAuthorizationToken", 
                        "ecr:GetDownloadUrlForLayer"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Ecr"
                }, 
                {
                    "Action": [
                        "codeconnections:UseConnection", 
                        "codeconnections:ListConnections", 
                        "codeconnections:GetConnection", 
                        "codeconnections:GetHost", 
                        "codeconnections:ListTagsForResource", 
                        "codestar-connections:UseConnection", 
                        "codestar-connections:ListConnections", 
                        "codestar-connections:GetConnection", 
                        "codestar-connections:GetHost", 
                        "codestar-connections:ListTagsForResource"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "CodeConnectionsUser"
                }, 
                {
                    "Action": [
                        "kms:DescribeKey", 
                        "kms:ListAliases", 
                        "kms:ListGrants"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "KmsListAndDescribe"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "ForAnyValue:StringEquals": {
                            "kms:EncryptionContextKeys": "aws:datazone:domainId"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "datazone.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "DataZoneKms"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContext:aws:s3:arn": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "s3.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "S3Kms"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContext:aws:scheduler:schedule:arn": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "scheduler.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "SchedulerKms"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContext:SecretARN": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "secretsmanager.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "SecretsKms"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey", 
                        "kms:GenerateDataKeyWithoutPlaintext"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "sagemaker.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "SageMakerKms"
                }, 
                {
                    "Action": [
                        "kms:CreateGrant"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringLike": {
                            "kms:ViaService": "sagemaker.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "SageMakerCreateGrant"
                }, 
                {
                    "Action": [
                        "kms:Decrypt", 
                        "kms:Encrypt", 
                        "kms:GenerateDataKey", 
                        "kms:GenerateDataKeyWithoutPlaintext"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "glue.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "GlueKms"
                }, 
                {
                    "Action": [
                        "kms:CreateGrant", 
                        "kms:Decrypt", 
                        "kms:GenerateDataKey"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Condition": {
                        "Null": {
                            "kms:EncryptionContextKeys": "false"
                        }, 
                        "StringLike": {
                            "kms:ViaService": "bedrock.*.amazonaws.com"
                        }
                    }, 
                    "Sid": "BedrockKms"
                }, 
                {
                    "Action": "ec2:Describe*", 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "Ec2DescribeOnly"
                }, 
                {
                    "Action": [
                        "ec2:CreateNetworkInterface", 
                        "ec2:DeleteNetworkInterface"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "VpcAccess"
                }, 
                {
                    "Action": [
                        "ec2:CreateTags", 
                        "ec2:DeleteTags"
                    ], 
                    "Resource": [
                        "arn:aws:ec2:*:*:network-interface/*"
                    ], 
                    "Effect": "Allow", 
                    "Sid": "EC2TagAccessForVpc"
                }, 
                {
                    "Action": [
                        "s3:GetObject*", 
                        "s3:PutObject*", 
                        "s3:RestoreObject", 
                        "s3:ReplicateObject", 
                        "s3:DeleteObject*", 
                        "s3:ListMultipartUploadParts", 
                        "s3:AbortMultipartUpload"
                    ], 
                    "Resource": [
                        "arn:aws:s3:::${aws:PrincipalTag/AmazonDataZoneProjectBucket}/*"
                    ], 
                    "Effect": "Allow", 
                    "Condition": {
                        "StringNotEquals": {
                            "aws:PrincipalTag/AmazonDataZoneProjectBucket": ""
                        }
                    }, 
                    "Sid": "AccessProjectS3BucketPermissions"
                }, 
                {
                    "Action": [
                        "emr-serverless:ListApplications", 
                        "emr-serverless:GetApplication"
                    ], 
                    "Resource": "*", 
                    "Effect": "Allow", 
                    "Sid": "EMRServerless"
                }
            ]
        }, 
        "IsDefaultVersion": true
    }
}
